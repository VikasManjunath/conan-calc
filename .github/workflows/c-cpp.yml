name: C/C++ CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
    # SONAR_SCANNER_VERSION: 4.6.1.2450 # Find the latest version in the "Linux" link on this page:
                                       # https://sonarcloud.io/documentation/analysis/scan/sonarscanner/
    # SONAR_SERVER_URL: "https://sonarcloud.io"
     BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed

    steps:
    - uses: actions/checkout@v2
    - name: Install conan && conan package tools
      run: |
          python3 -m pip install --upgrade pip
          pip3 install conan
          pip3 install conan_package_tools        
    - name: configure remote add
      run: conan remote add remoterepo https://vickyconancentral.jfrog.io/artifactory/api/conan/calculator-conan
    - name: conan remote user confi
      run: conan user -p ${{ secrets.CONAN_KEY }} -r remoterepo vicky31dec86@gmail.com
      env: 
        CONAN_REVISIONS_ENABLED: 1
        
        
      
#    - name: conan project install
#      run: |
#          mkdir build && cd build
#          conan install ..
#    - name: configure and build
#      run: |
#        cd build && cmake ../src
#        cmake --build .
    
#    - name: Set up JDK 11
#      uses: actions/setup-java@v1
#      with:
#        java-version: 11
#    - name: Cache SonarCloud packages
#      uses: actions/cache@v1
#      with:
#        path: ~/.sonar/cache
#        key: ${{ runner.os }}-sonar
#        restore-keys: ${{ runner.os }}-sonar
#    - name: Download and set up sonar-scanner
#      env:
#        SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
#      run: |
#        mkdir -p $HOME/.sonar
#        curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
#        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
#        echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH


    - name: Download and set up build-wrapper
      env:
        BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
    #  run: |
    #    mkdir -p $HOME/.sonar
     #   curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
     #   unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
     #   echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
      run: |
        mkdir -p $HOME/tools && cd $HOME/tools
        wget https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
        unzip build-wrapper-linux-x86.zip
        echo "$HOME/tools/build-wrapper-linux-x86" >> $GITHUB_PATH
    - name: Run build-wrapper
      run: |
        mkdir build && cd build
        conan install ..        
        cmake .. -DCMAKE_BUILD_TYPE=Debug 
        build-wrapper-linux-x86-64 --out-dir ../${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build . 
 
#-Dsonar.python.coverage.reportPaths=build/gcovr_report.xml
      
    - name: Test
      working-directory: build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest
      
    - name: gcov install
      run: |
        sudo apt-get install -y gcovr
        
    - name: coverage
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=PROFILE ..
        cmake --build .
        gcovr -r ../src . --sonarqube -o gcovr_report.xml        
        cat ../${{ env.BUILD_WRAPPER_OUT_DIR }}/build-wrapper-dump.json


    - name: SonarScan
      uses: sonarsource/sonarcloud-github-action@master
      with:
        projectBaseDir: .
        args: >
          -Dsonar.organization=vikasmanjunath
          -Dsonar.projectKey=VikasManjunath_conan-calc
          -Dsonar.sources=src/
          -Dsonar.test.exclusions=test/**
          -Dsonar.tests=test/
          -Dsonar.cfamily.build-wrapper-output=build_wrapper_output_directory
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
#    - name: Run sonar-scanner
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#      run: |
#        sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

  

        
    - name: package clean up
      run: |
        conan remove "calculator*" --builds --force
        conan remove "calculator*" --packages --force
        conan remove "calculator*" --src --force
        conan remove "calculator*" --force 
    - name: create package
      run: conan create . master/release
    - name: upload package
      run: conan upload "calculator/0.1@master/release" -r=remoterepo --force
      env: 
        CONAN_REVISIONS_ENABLED: 1
